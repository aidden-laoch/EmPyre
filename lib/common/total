        cur.execute("DELETE FROM agents WHERE session_id LIKE ?", [sessionID])
        cur.execute("INSERT INTO agents (name,session_id,delay,jitter,external_ip,session_key,nonce,checkin_time,lastseen_time,uris,user_agent,headers,kill_date,working_hours,lost_limit,taskings,results) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
        cur.execute("INSERT INTO reporting (name,event_type,message,time_stamp) VALUES (?,?,?,?)", (sessionID, "checkin", checkinTime, helpers.get_datetime()))
        cur.execute("SELECT * FROM agents WHERE session_id=?", [sessionID])
        cur.execute("SELECT internal_ip FROM agents WHERE session_id=?", [sessionID])
        cur.execute("SELECT high_integrity FROM agents WHERE session_id=?", [sessionID])
        cur.execute("SELECT py_version FROM agents WHERE session_id=?", [sessionID])
        cur.execute("SELECT session_key FROM agents WHERE session_id=?", [sessionID])
        cur.execute("SELECT nonce FROM agents WHERE session_id=?", [sessionID])
            cur.execute("SELECT results FROM agents WHERE session_id=?", [sessionID])
            cur.execute("UPDATE agents SET results = ? WHERE session_id=?", ['',sessionID])
        cur.execute("SELECT session_id FROM agents WHERE name=?", [name])
        cur.execute("SELECT name FROM agents WHERE session_id=? or name = ?", [sessionID, sessionID])
        cur.execute("SELECT hostname FROM agents WHERE session_id=? or name = ?", [sessionID, sessionID])
        cur.execute("SELECT uris, old_uris FROM agents WHERE session_id=?", [sessionID])
            cur.execute("SELECT results FROM agents WHERE session_id LIKE ?", [sessionID])
            cur.execute("UPDATE agents SET results = ? WHERE session_id=?", [json.dumps(agentResults),sessionID])
        cur.execute("UPDATE agents SET listener = ?, internal_ip = ?, username = ?, high_integrity = ?, hostname = ?, os_details = ?, process_id = ?, py_version = ? WHERE session_id=?", [listener, internal_ip, username, high_integrity, hostname, os_details, process_id, py_version, sessionID])
        cur.execute("UPDATE agents SET lastseen_time=? WHERE session_id=?", [currentTime, sessionID])
        cur.execute("SELECT uris FROM agents WHERE session_id=?", [sessionID])
            cur.execute("UPDATE agents SET uris=?, user_agent=?, old_uris=? WHERE session_id=?", [parts[0], parts[1], oldURIs, sessionID])
            cur.execute("UPDATE agents SET uris=?, user_agent=?, headers=?, old_uris=? WHERE session_id=?", [parts[0], parts[1], parts[2], oldURIs, sessionID])
            cur.execute("UPDATE agents SET name=? WHERE name=?", [newname, oldname])
            cur.execute("INSERT INTO reporting (name,event_type,message,time_stamp) VALUES (?,?,?,?)", (oldname, "rename", newname, helpers.get_datetime()))
        cur.execute("UPDATE agents SET "+str(field)+"=? WHERE session_id=?", [value, sessionID])
            cur.execute("UPDATE config SET autorun_command=?", [taskCommand])
            cur.execute("UPDATE config SET autorun_data=?", [moduleData])
                cur.execute("SELECT taskings FROM agents WHERE session_id=?", [sessionID])
                cur.execute("UPDATE agents SET taskings=? WHERE session_id=?", [json.dumps(agentTasks),sessionID])
                cur.execute("INSERT INTO reporting (name,event_type,message,time_stamp) VALUES (?,?,?,?)", (sessionID, "task", taskName + " - " + task[0:50], helpers.get_datetime()))
            cur.execute("SELECT taskings FROM agents WHERE session_id=?", [sessionID])
                cur.execute("UPDATE agents SET taskings=? WHERE session_id=?", ['', sessionID])
        cur.execute("UPDATE agents SET taskings=? WHERE session_id LIKE ?", ['', sessionID])
        cur.execute("INSERT INTO reporting (name,event_type,message,time_stamp) VALUES (?,?,?,?)", (agentSessionID, "result", responseName, helpers.get_datetime()))
        # TODO: for heavy traffic packets, check these first (i.e. SOCKS?)
            # TODO: put this code before the URI present? ...
        elif resource.lstrip("/").split("?")[0] == self.stage0:
            if "?" in resource:
                parts = resource.split("?")
        elif resource.lstrip("/").split("?")[0] == self.stage1:
        elif resource.lstrip("/").split("?")[0] == self.stage2:
                if "?" in resource:
                    parts = resource.split("?")
        cur.execute('SELECT * FROM credentials WHERE id=? limit 1', [credentialID])
            cur.execute("SELECT * FROM credentials WHERE id=? limit 1", [filterTerm])
            cur.execute("SELECT * FROM credentials WHERE LOWER(host) LIKE LOWER(?) or LOWER(username) like LOWER(?)", [filterTerm, filterTerm])
            cur.execute("SELECT * FROM credentials WHERE LOWER(credtype) LIKE LOWER(?)", [credtype])
            cur.execute("SELECT * FROM credentials WHERE LOWER(note) LIKE LOWER(%?%)", [note])
        cur.execute("INSERT INTO credentials (credtype, domain, username, password, host, sid, notes) VALUES (?,?,?,?,?,?,?)", [credtype, domain, username, password, host, sid, notes] )
        cur.execute("UPDATE credentials SET note = ? WHERE id=?", [note,credentialID])
            cur.execute("DELETE FROM credentials WHERE id=?", [credID])
            # export by csv?
                    choice = raw_input(helpers.color("\n[>] Exit? [y/N] ", "red"))
                        choice = raw_input(helpers.color("[>] Remove all credentials from the database? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Kill all agents? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Remove all agents from the database? [y/N] ", "red"))
            choice = raw_input(helpers.color("[>] Task agent to exit? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Kill all listeners? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Module is not opsec safe, run? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Run module on all agents? [y/N] ", "red"))
    allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?<!-)$", re.IGNORECASE)
    reg = r'(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
        cur.execute('SELECT id FROM listeners WHERE name=?', [name])
                    choice = raw_input(helpers.color("[!] Host does not end with .php continue? [y/N] "))
                cur.execute("INSERT INTO listeners (name, host, port, cert_path, staging_key, default_delay, default_jitter, default_profile, kill_date, working_hours, listener_type, redirect_target,default_lost_limit) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", [name, host, port, certPath, stagingKey, defaultDelay, defaultJitter, defaultProfile, killDate, workingHours, listenerType, redirectTarget, defaultLostLimit])
                cur.execute("SELECT id FROM listeners where name=?", [name])
                        cur.execute("INSERT INTO listeners (name, host, port, cert_path, staging_key, default_delay, default_jitter, default_profile, kill_date, working_hours, listener_type, redirect_target, default_lost_limit) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", [name, host, port, certPath, stagingKey, defaultDelay, defaultJitter, defaultProfile, killDate, workingHours, listenerType, redirectTarget, defaultLostLimit])
                        cur.execute("SELECT id FROM listeners where name=?", [name])
            cur.execute("INSERT INTO listeners (name, host, port, cert_path, staging_key, default_delay, default_jitter, default_profile, kill_date, working_hours, listener_type, redirect_target,default_lost_limit) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", [sessionID, pivotHost, listenPort, cert_path, staging_key, default_delay, default_jitter, default_profile, kill_date, working_hours, "pivot", name, defaultLostLimit])
            cur.execute("SELECT id FROM listeners where name=?", [sessionID])
            checksum = "?" + helpers.encode_base64(server + "&" + self.stage0)
            checksum += "?" + helpers.encode_base64(pivotServer)
                    choice = raw_input(helpers.color("\n[>] Exit? [y/N] ", "red"))
                        choice = raw_input(helpers.color("[>] Remove all credentials from the database? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Kill all agents? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Remove all agents from the database? [y/N] ", "red"))
            choice = raw_input(helpers.color("[>] Task agent to exit? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Kill all listeners? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Module is not opsec safe, run? [y/N] ", "red"))
                choice = raw_input(helpers.color("[>] Run module on all agents? [y/N] ", "red"))
